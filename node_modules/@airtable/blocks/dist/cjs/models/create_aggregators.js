"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__injectSdkIntoCreateAggregators = __injectSdkIntoCreateAggregators;
exports.default = createAggregators;
require("core-js/modules/es.array.map.js");
var _error_utils = require("../error_utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // istanbul ignore file
/** @module @airtable/blocks/models: Aggregators */ /** */
/**
 * Aggregators can be used to compute aggregates for cell values.
 *
 * @example
 * ```js
 * import {aggregators} from '@airtable/blocks/models';
 *
 * // To get a list of aggregators supported for a specific field:
 * const fieldAggregators = myField.availableAggregators;
 *
 * // To compute the total attachment size of an attachment field:
 * const aggregator = aggregators.totalAttachmentSize;
 * const value = aggregator.aggregate(myRecords, myAttachmentField);
 * const valueAsString = aggregate.aggregateToString(myRecords, myAttachmentField);
 * ```
 * @docsPath models/Aggregator
 */

/**
 * Note: this is hidden instead of internal as it is the type of the public models.aggregators.
 *
 * If its internal, typescript won't know about it since the types will be stripped, and typescript
 * blocks will error due to incomplete type definitions.
 *
 * @hidden
 */

var aggregate = (aggregatorKey, records, field) => {
  if (!field.isAggregatorAvailable(aggregatorKey)) {
    throw (0, _error_utils.spawnError)('The %s aggregator is not available for %s fields', aggregatorKey, field.type);
  }
  var _sdk2 = sdk,
    appInterface = _sdk2.__appInterface,
    airtableInterface = _sdk2.__airtableInterface;
  var cellValues = records.map(record => record._getRawCellValue(field));
  return airtableInterface.aggregators.aggregate(appInterface, aggregatorKey, cellValues, field._data);
};
var aggregateToString = (aggregatorKey, records, field) => {
  if (!field.isAggregatorAvailable(aggregatorKey)) {
    throw (0, _error_utils.spawnError)('The %s aggregator is not available for %s fields', aggregatorKey, field.type);
  }
  var _sdk3 = sdk,
    appInterface = _sdk3.__appInterface,
    airtableInterface = _sdk3.__airtableInterface;
  var cellValues = records.map(record => record._getRawCellValue(field));
  return airtableInterface.aggregators.aggregateToString(appInterface, aggregatorKey, cellValues, field._data);
};

/**
 * Note: this is hidden instead of internal as it is used to determine the type of the public
 * models.aggregators.
 *
 * If its internal, typescript won't know about it since the types will be stripped, and typescript
 * blocks will error due to incomplete type definitions.
 *
 * TODO: this should be made less brittle.
 *
 * @hidden
 */
function createAggregators() {
  var _sdk4 = sdk,
    airtableInterface = _sdk4.__airtableInterface;
  var aggregators = {};
  var aggregatorKeys = airtableInterface.aggregators.getAllAvailableAggregatorKeys();
  var _iterator = _createForOfIteratorHelper(aggregatorKeys),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _key = _step.value;
      var config = airtableInterface.aggregators.getAggregatorConfig(_key);
      aggregators[_key] = Object.freeze({
        key: _key,
        displayName: config.displayName,
        shortDisplayName: config.shortDisplayName,
        aggregate: aggregate.bind(null, _key),
        aggregateToString: aggregateToString.bind(null, _key)
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  Object.freeze(aggregators);
  return aggregators;
}
var sdk;

// The application-level Sdk instance must be injected dynamically to avoid
// circular dependencies at the time of module resolution.
function __injectSdkIntoCreateAggregators(_sdk) {
  sdk = _sdk;
}