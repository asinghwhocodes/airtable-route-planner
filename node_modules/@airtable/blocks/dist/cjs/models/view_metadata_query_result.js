"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/web.dom-collections.for-each.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.map.js");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _error_utils = require("../error_utils");
var _private_utils = require("../private_utils");
var _abstract_model_with_async_data = _interopRequireDefault(require("./abstract_model_with_async_data"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /** @module @airtable/blocks/models: View */ /** */
var WatchableViewMetadataKeys = {
  allFields: 'allFields',
  visibleFields: 'visibleFields',
  isDataLoaded: 'isDataLoaded',
  groupLevels: 'groupLevels'
};

/**
 * A key in {@link ViewMetadataQueryResult} that can be watched.
 * - `allFields`
 * - `visibleFields`
 * - `isDataLoaded`
 */

/** @hidden */

/**
 * @hidden
 */

/**
 * @hidden
 */
/**
 * Contains information about a view that isn't loaded by default e.g. field order and visible fields.
 *
 * In a React component, we recommend using {@link useViewMetadata} instead.
 *
 * @example
 * ```js
 * async function loadMetadataForViewAsync(view) {
 *     const viewMetadata = view.selectMetadata();
 *     await viewMetadata.loadDataAsync();
 *
 *     console.log(viewMetadata.visibleFields);
 *     // => [Field, Field, Field]
 *
 *     console.log(viewMetadata.allFields);
 *     // => [Field, Field, Field, Field, Field]
 *
 *     viewMetadata.unloadData();
 * }
 * ```
 * @docsPath models/query results/ViewMetadataQueryResult
 */
var ViewMetadataQueryResult = /*#__PURE__*/function (_AbstractModelWithAsy) {
  /** @internal */
  function ViewMetadataQueryResult(sdk, parentView, viewDataStore) {
    var _this;
    (0, _classCallCheck2.default)(this, ViewMetadataQueryResult);
    _this = _callSuper(this, ViewMetadataQueryResult, [sdk, (0, _private_utils.getLocallyUniqueId)('ViewMetadataQueryResult')]);
    /** */
    (0, _defineProperty2.default)(_this, "parentView", void 0);
    /** @internal */
    (0, _defineProperty2.default)(_this, "_viewDataStore", void 0);
    /** @internal */
    (0, _defineProperty2.default)(_this, "_onVisibleFieldIdsChange", () => {
      _this._onChange(WatchableViewMetadataKeys.visibleFields);
    });
    /** @internal */
    (0, _defineProperty2.default)(_this, "_onAllFieldIdsChange", () => {
      _this._onChange(WatchableViewMetadataKeys.allFields);
    });
    /** @internal */
    (0, _defineProperty2.default)(_this, "_onGroupLevelsChange", () => {
      _this._onChange(WatchableViewMetadataKeys.groupLevels);
    });
    _this.parentView = parentView;
    _this._viewDataStore = viewDataStore;
    return _this;
  }

  /** @internal */
  (0, _inherits2.default)(ViewMetadataQueryResult, _AbstractModelWithAsy);
  return (0, _createClass2.default)(ViewMetadataQueryResult, [{
    key: "__poolKey",
    get: function get() {
      return this.parentView.id;
    }

    /** @internal */
  }, {
    key: "_dataOrNullIfDeleted",
    get: function get() {
      if (this._viewDataStore.isDeleted) {
        return null;
      }
      if (!this._viewDataStore.isDataLoaded) {
        return {
          visibleFieldIds: null,
          allFieldIds: null,
          groupLevels: null
        };
      }
      return {
        visibleFieldIds: this._viewDataStore.visibleFieldIds,
        allFieldIds: this._viewDataStore.allFieldIds,
        groupLevels: this._viewDataStore.groupLevels
      };
    }

    /** @internal */
  }, {
    key: "_onChangeIsDataLoaded",
    value: function _onChangeIsDataLoaded() {
      this._onChange(WatchableViewMetadataKeys.isDataLoaded);
    }

    /** @internal */
  }, {
    key: "_loadDataAsync",
    value: (function () {
      var _loadDataAsync2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this._viewDataStore.loadDataAsync();
            case 2:
              this._viewDataStore.watch('visibleFieldIds', this._onVisibleFieldIdsChange);
              this._viewDataStore.watch('allFieldIds', this._onAllFieldIdsChange);
              this._viewDataStore.watch('groupLevels', this._onGroupLevelsChange);
              return _context.abrupt("return", [WatchableViewMetadataKeys.visibleFields, WatchableViewMetadataKeys.allFields, WatchableViewMetadataKeys.groupLevels]);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _loadDataAsync() {
        return _loadDataAsync2.apply(this, arguments);
      }
      return _loadDataAsync;
    }() /** @internal */)
  }, {
    key: "_unloadData",
    value: function _unloadData() {
      this._viewDataStore.unwatch('visibleFieldIds', this._onVisibleFieldIdsChange);
      this._viewDataStore.unwatch('allFieldIds', this._onAllFieldIdsChange);
      this._viewDataStore.unwatch('groupLevels', this._onGroupLevelsChange);
      this._viewDataStore.unloadData();
    }
  }, {
    key: "allFields",
    get:
    /**
     * Returns every field in the table in the order they appear in this view. Watchable.
     */
    function get() {
      var allFieldIds = this._data.allFieldIds;
      (0, _error_utils.invariant)(allFieldIds, 'view meta data is not loaded');
      return allFieldIds.map(fieldId => this.parentView.parentTable.getFieldById(fieldId));
    }

    /**
     * Returns every field visible in this view. Watchable.
     */
  }, {
    key: "visibleFields",
    get: function get() {
      var visibleFieldIds = this._data.visibleFieldIds;
      (0, _error_utils.invariant)(visibleFieldIds, 'view meta data is not loaded');
      return visibleFieldIds.map(fieldId => this.parentView.parentTable.getFieldById(fieldId));
    }

    /**
     * Returns group levels for this view. Watchable.
     *
     * @hidden
     */
  }, {
    key: "groupLevels",
    get: function get() {
      var groupLevels = this._data.groupLevels;
      return groupLevels ? groupLevels.map(singleConfig => _objectSpread(_objectSpread({}, singleConfig), {}, {
        field: this.parentView.parentTable.getFieldById(singleConfig.fieldId)
      })) : null;
    }
  }], [{
    key: "_isWatchableKey",
    value: /** @internal */
    function _isWatchableKey(key) {
      return (0, _private_utils.isEnumValue)(WatchableViewMetadataKeys, key);
    }

    /** @internal */
  }, {
    key: "_shouldLoadDataForKey",
    value: function _shouldLoadDataForKey(key) {
      return key === WatchableViewMetadataKeys.allFields || key === WatchableViewMetadataKeys.visibleFields || key === WatchableViewMetadataKeys.groupLevels;
    }
  }]);
}(_abstract_model_with_async_data.default);
/** @internal */
(0, _defineProperty2.default)(ViewMetadataQueryResult, "_className", 'ViewMetadataQueryResult');
var _default = exports.default = ViewMetadataQueryResult;