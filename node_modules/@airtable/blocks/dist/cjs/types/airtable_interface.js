"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockRunContextType = void 0;
// BlockRunContextType, BlockInstallationPageBlockRunContext, ViewBlockRunContext, BlockRunContext
// must be kept in sync with block_run_context.tsx in hyperbase repo
/** @hidden */
var BlockRunContextType = exports.BlockRunContextType = /*#__PURE__*/function (BlockRunContextType) {
  BlockRunContextType["DASHBOARD_APP"] = "dashboardApp";
  BlockRunContextType["VIEW"] = "view";
  return BlockRunContextType;
}({});
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
// TODO: (SeanKeenan) Move NormalizedSortConfig from record_query_result here
//       once/if we support setting the sort config for a view
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/**
 * AppInterface should never be used directly by the SDK, so we don't describe the type.
 *
 * @hidden
 */
/** @hidden */
/**
 * AirtableInterface is designed as the communication interface between the
 * Block SDK and Airtable. The mechanism through which we communicate with Airtable
 * depends on the context in which the block is running (i.e. frontend or backend),
 * but the interface should remain consistent.
 *
 * @hidden
 */