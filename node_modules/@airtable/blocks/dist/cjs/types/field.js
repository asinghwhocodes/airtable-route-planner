"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldType = void 0;
/** @module @airtable/blocks/models: Field */
/** */
/** */
/** @hidden */
/**
 * An enum of Airtable's field types
 *
 * @example
 * ```js
 * import {FieldType} from '@airtable/blocks/models';
 * const numberFields = myTable.fields.filter(field => (
 *     field.type === FieldType.NUMBER
 * ));
 * ```
 */
var FieldType = exports.FieldType = /*#__PURE__*/function (FieldType) {
  FieldType["SINGLE_LINE_TEXT"] = "singleLineText";
  FieldType["EMAIL"] = "email";
  FieldType["URL"] = "url";
  FieldType["MULTILINE_TEXT"] = "multilineText";
  FieldType["NUMBER"] = "number";
  FieldType["PERCENT"] = "percent";
  FieldType["CURRENCY"] = "currency";
  FieldType["SINGLE_SELECT"] = "singleSelect";
  FieldType["MULTIPLE_SELECTS"] = "multipleSelects";
  FieldType["SINGLE_COLLABORATOR"] = "singleCollaborator";
  FieldType["MULTIPLE_COLLABORATORS"] = "multipleCollaborators";
  FieldType["MULTIPLE_RECORD_LINKS"] = "multipleRecordLinks";
  FieldType["DATE"] = "date";
  FieldType["DATE_TIME"] = "dateTime";
  FieldType["PHONE_NUMBER"] = "phoneNumber";
  FieldType["MULTIPLE_ATTACHMENTS"] = "multipleAttachments";
  FieldType["CHECKBOX"] = "checkbox";
  FieldType["FORMULA"] = "formula";
  FieldType["CREATED_TIME"] = "createdTime";
  FieldType["ROLLUP"] = "rollup";
  FieldType["COUNT"] = "count";
  FieldType["MULTIPLE_LOOKUP_VALUES"] = "multipleLookupValues";
  FieldType["AUTO_NUMBER"] = "autoNumber";
  FieldType["BARCODE"] = "barcode";
  FieldType["RATING"] = "rating";
  FieldType["RICH_TEXT"] = "richText";
  FieldType["DURATION"] = "duration";
  FieldType["LAST_MODIFIED_TIME"] = "lastModifiedTime";
  FieldType["CREATED_BY"] = "createdBy";
  FieldType["LAST_MODIFIED_BY"] = "lastModifiedBy";
  FieldType["BUTTON"] = "button";
  FieldType["EXTERNAL_SYNC_SOURCE"] = "externalSyncSource";
  FieldType["AI_TEXT"] = "aiText";
  return FieldType;
}({});
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
// These field option definitions are based on the types returned by block_field_type_provider#getConfig
// Be careful to keep them in sync and make changes in a backwards compatible manner
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/** @hidden */
/**
 * A type for use with Field objects to make type narrowing FieldOptions easier.
 *
 * @example
 * const fieldConfig = field.config;
 * if (fieldConfig.type === FieldType.SINGLE_SELECT) {
 *     return fieldConfig.options.choices;
 * } else if (fieldConfig.type === FieldType.MULTIPLE_LOOKUP_VALUES && fieldConfig.options.isValid) {
 *     if (fieldConfig.options.result.type === FieldType.SINGLE_SELECT) {
 *         return fieldConfig.options.result.options.choices;
 *     }
 * }
 * return DEFAULT_CHOICES;
 */