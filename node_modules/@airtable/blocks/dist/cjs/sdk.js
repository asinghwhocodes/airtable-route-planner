"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _global_config = _interopRequireDefault(require("./global_config"));
var _base = _interopRequireDefault(require("./models/base"));
var _session = _interopRequireDefault(require("./models/session"));
var _mutations = _interopRequireDefault(require("./models/mutations"));
var _cursor = _interopRequireDefault(require("./models/cursor"));
var _viewport = _interopRequireDefault(require("./viewport"));
var _settings_button = _interopRequireDefault(require("./settings_button"));
var _undo_redo = _interopRequireDefault(require("./undo_redo"));
var _perform_record_action = require("./perform_record_action");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @hidden */ /** */
// NOTE: The version of React running in the Block SDK is controlled by the block.
// The SDK should not make too many assumptions about which version of React or
// ReactDOM is running.

// HACK: make sure React.PropTypes is defined. If the block is using a newer
// version of React, PropTypes won't be available, but a few SDK components
// try to reference it. Once grepping React.PropTypes in hyperbase doesn't
// return any matches, we can remove this hack.

if (!React.PropTypes) {
  React.PropTypes = _propTypes.default;
}

/**
 * @hidden
 * @example
 * ```js
 * import {runInfo} from '@airtable/blocks';
 * if (runInfo.isFirstRun) {
 *     // The current user just installed this block.
 *     // Take the opportunity to show any onboarding and set
 *     // sensible defaults if the user has permission.
 *     // For example, if the block relies on a table, it would
 *     // make sense to set that to cursor.activeTableId
 * }
 * ```
 */

/** @hidden */

/** @internal */
function defaultUpdateBatcher(applyUpdates) {
  applyUpdates();
}

/**
 * We document this manually.
 *
 * @hidden
 */
var BlockSdk = exports.default = /*#__PURE__*/function () {
  /** @hidden */
  function BlockSdk(airtableInterface) {
    (0, _classCallCheck2.default)(this, BlockSdk);
    /** @internal */
    (0, _defineProperty2.default)(this, "__airtableInterface", void 0);
    /** Storage for this block installation's configuration. */
    (0, _defineProperty2.default)(this, "globalConfig", void 0);
    /** Represents the current Airtable {@link Base}. */
    (0, _defineProperty2.default)(this, "base", void 0);
    /** Contains information about the current session. */
    (0, _defineProperty2.default)(this, "session", void 0);
    /** @internal */
    (0, _defineProperty2.default)(this, "__mutations", void 0);
    /**
     * Returns the ID for the current block installation.
     *
     * @example
     * ```js
     * import {installationId} from '@airtable/blocks';
     * console.log(installationId);
     * // => 'blifDutUr92OKwnUn'
     * ```
     */
    (0, _defineProperty2.default)(this, "installationId", void 0);
    /** Controls the block's viewport. You can fullscreen the block and add size
     * constrains using `viewport`.
     */
    (0, _defineProperty2.default)(this, "viewport", void 0);
    /** @hidden */
    (0, _defineProperty2.default)(this, "runInfo", void 0);
    /** Returns information about the active table, active view, and selected records. */
    (0, _defineProperty2.default)(this, "cursor", void 0);
    /**
     * Controls the block's {@link settingsButton settings button}.
     */
    (0, _defineProperty2.default)(this, "settingsButton", void 0);
    /** @hidden */
    (0, _defineProperty2.default)(this, "undoRedo", void 0);
    /** @internal */
    (0, _defineProperty2.default)(this, "performRecordAction", void 0);
    // When models are updated on the frontend, we want to batch them together and have React do a
    // single render.
    //
    // Without this, in sync-mode React (the current default), anything that triggers an update
    // (like .setState or .forceUpdate) will instantly, synchronously re-render. So if you have an
    // update that triggers multiple updates across your tree, you get multiple renders in an
    // unpredictable order. This is bad because it's unnecessary work and the update order can
    // contradict react's normal top-down data flow which can cause subtle bugs.
    //
    // We set _runWithUpdateBatching to ReactDOM.unstable_batchedUpdates to facilitate this. We
    // don't know for sure though that React is in use on the page, so we leave actually setting
    // this when the developer sets up their block with React, in UI.initializeBlock.
    /** @internal */
    (0, _defineProperty2.default)(this, "_runWithUpdateBatching", defaultUpdateBatcher);
    this.__airtableInterface = airtableInterface;
    // @ts-ignore
    airtableInterface.assertAllowedSdkPackageVersion("@airtable/blocks", BlockSdk.VERSION);
    var sdkInitData = airtableInterface.sdkInitData;
    this.globalConfig = new _global_config.default(sdkInitData.initialKvValuesByKey, this);
    this.base = new _base.default(this);
    this.installationId = sdkInitData.blockInstallationId;

    // Bind the public methods on this class so users can import
    // just the method, e.g.
    // import {reload} from '@airtable/blocks';
    this.reload = this.reload.bind(this);
    this.unstable_fetchAsync = this.unstable_fetchAsync.bind(this);
    this.viewport = new _viewport.default(sdkInitData.isFullscreen, airtableInterface);
    this.cursor = new _cursor.default(this);
    this.session = new _session.default(this);
    this.__mutations = new _mutations.default(this, this.session, this.base, changes => this.__applyModelChanges(changes), updates => this.__applyGlobalConfigUpdates(updates));
    this.settingsButton = new _settings_button.default(airtableInterface);
    this.undoRedo = new _undo_redo.default(airtableInterface);
    this.performRecordAction = new _perform_record_action.PerformRecordAction(this, airtableInterface);
    this.runInfo = Object.freeze({
      isFirstRun: sdkInitData.isFirstRun,
      isDevelopmentMode: sdkInitData.isDevelopmentMode,
      intentData: sdkInitData.intentData
    });

    // Now that we've constructed our models, let's hook them up to realtime changes.
    this._registerHandlers();

    // TODO: freeze this object before we ship the code editor.
  }
  /** @internal */
  return (0, _createClass2.default)(BlockSdk, [{
    key: "__applyModelChanges",
    value: function __applyModelChanges(changes) {
      this._runWithUpdateBatching(() => {
        var changedBasePaths = this.base.__applyChangesWithoutTriggeringEvents(changes);
        var changedCursorKeys = this.cursor.__applyChangesWithoutTriggeringEvents(changes);
        var changedSessionKeys = this.session.__applyChangesWithoutTriggeringEvents(changes);
        this.base.__triggerOnChangeForChangedPaths(changedBasePaths);
        this.cursor.__triggerOnChangeForChangedKeys(changedCursorKeys);
        this.session.__triggerOnChangeForChangedKeys(changedSessionKeys);
      });
    }
    /** @internal */
  }, {
    key: "__applyGlobalConfigUpdates",
    value: function __applyGlobalConfigUpdates(updates) {
      this._runWithUpdateBatching(() => {
        this.globalConfig.__setMultipleKvPaths(updates);
      });
    }
    /** @internal */
  }, {
    key: "_registerHandlers",
    value: function _registerHandlers() {
      // base

      this.__airtableInterface.subscribeToModelUpdates(_ref => {
        var changes = _ref.changes;
        this.__applyModelChanges(changes);
      });

      // global config
      this.__airtableInterface.subscribeToGlobalConfigUpdates(_ref2 => {
        var updates = _ref2.updates;
        this.__applyGlobalConfigUpdates(updates);
      });

      // settings button
      this.__airtableInterface.subscribeToSettingsButtonClick(() => {
        if (this.settingsButton.isVisible) {
          this._runWithUpdateBatching(() => {
            // Since there's an async gap when communicating with liveapp,
            // no-op if the button has been hidden since it was clicked.
            this.settingsButton.__onClick();
          });
        }
      });

      // viewport
      this.__airtableInterface.subscribeToEnterFullScreen(() => {
        this._runWithUpdateBatching(() => {
          this.viewport.__onEnterFullscreen();
        });
      });
      this.__airtableInterface.subscribeToExitFullScreen(() => {
        this._runWithUpdateBatching(() => {
          this.viewport.__onExitFullscreen();
        });
      });
      this.__airtableInterface.subscribeToFocus(() => {
        this._runWithUpdateBatching(() => {
          this.viewport.__focus();
        });
      });
    }
    /**
     * Call this function to reload your block.
     *
     * @example
     * ```js
     * import React from 'react';
     * import {reload} from '@airtable/blocks';
     * import {Button, initializeBlock} from '@airtable/blocks/ui';
     * function MyBlock() {
     *     return <Button onClick={() => reload()}>Reload</Button>;
     * }
     * initializeBlock(() => <MyBlock />);
     * ```
     */
  }, {
    key: "reload",
    value: function reload() {
      this.__airtableInterface.reloadFrame();
    }
    /** @internal */
  }, {
    key: "__setBatchedUpdatesFn",
    value: function __setBatchedUpdatesFn(newUpdateBatcher) {
      this._runWithUpdateBatching = newUpdateBatcher;
    }

    /**
     * @internal
     */
  }, {
    key: "__appInterface",
    get: function get() {
      return this.base._baseData.appInterface;
    }

    /** @hidden */
  }, {
    key: "unstable_fetchAsync",
    value: (function () {
      var _unstable_fetchAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(requestJson) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.__airtableInterface.performBackendFetchAsync(requestJson);
            case 2:
              return _context.abrupt("return", _context.sent);
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function unstable_fetchAsync(_x) {
        return _unstable_fetchAsync.apply(this, arguments);
      }
      return unstable_fetchAsync;
    }() /** @hidden */)
  }, {
    key: "getBlockRunContext",
    value: function getBlockRunContext() {
      return this.__airtableInterface.sdkInitData.runContext;
    }
  }]);
}();
/**
 * This value is used by the blocks-testing library to verify
 * compatibility.
 *
 * @hidden
 */
// @ts-ignore
(0, _defineProperty2.default)(BlockSdk, "VERSION", "1.18.2");