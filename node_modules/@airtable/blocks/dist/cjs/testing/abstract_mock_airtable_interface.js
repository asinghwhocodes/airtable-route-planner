"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractMockAirtableInterface = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
require("core-js/modules/es.array.concat.js");
require("core-js/modules/es.array.map.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.promise.js");
var _private_utils = require("../private_utils");
var _error_utils = require("../error_utils");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // istanbul ignore file
var EventEmitter = require('events');

/** @internal */
var aggregators = {
  aggregate(appInterface, summaryFunctionKey, cellValues, fieldData) {
    return null;
  },
  aggregateToString(appInterface, summaryFunctionKey, cellValues, fieldData) {
    return '';
  },
  getAggregatorConfig(summaryFunctionKey) {
    return {
      key: '',
      displayName: '',
      shortDisplayName: ''
    };
  },
  getAllAvailableAggregatorKeys() {
    return [];
  },
  getAvailableAggregatorKeysForField(fieldData) {
    return [];
  }
};

/** @internal */
var fieldTypeProvider = {
  isComputed(fieldData) {
    return false;
  },
  validateConfigForUpdate: () => {
    return {
      isValid: true
    };
  },
  getConfig: (appInterface, fieldData, fieldNamesById) => {
    return {
      type: fieldData.type,
      options: fieldData.typeOptions
    };
  },
  canBePrimary: () => {
    return true;
  },
  convertStringToCellValue(appInterface, string, fieldData) {
    return '';
  },
  convertCellValueToString(appInterface, cellValue, fieldData) {
    return '';
  },
  getCellRendererData(appInterface, cellValue, fieldData, shouldWrap) {
    return {
      cellValueHtml: "<pre>".concat(JSON.stringify(cellValue), "</pre>"),
      attributes: {}
    };
  },
  validateCellValueForUpdate(appInterface, newCellValue, currentCellValue, fieldData) {
    return {
      isValid: true
    };
  },
  getUiConfig(appInterface, fieldData) {
    return {
      iconName: '',
      desiredCellWidthForRecordCard: 0,
      minimumCellWidthForRecordCard: 0
    };
  }
};

/** @internal */
var urlConstructor = {
  getTableUrl(tableId) {
    return "https://airtable.test/".concat(tableId);
  },
  getViewUrl(viewId, tableId) {
    return "https://airtable.test/".concat(tableId, "/").concat(viewId);
  },
  getRecordUrl(recordId, tableId) {
    return "https://airtable.test/".concat(tableId, "/").concat(recordId);
  },
  getAttachmentClientUrl(appInterface, attachmentId, attachmentUrl) {
    return attachmentUrl;
  }
};

/** @internal */
var globalConfigHelpers = {
  validatePath(path, store) {
    return {
      isValid: true
    };
  },
  validateAndApplyUpdates(updates, store) {
    throw (0, _error_utils.spawnError)('validateAndApplyUpdates unimplemented');
  }
};

/** @internal */
var idGenerator = {
  generateRecordId: () => 'recGeneratedMockId',
  generateFieldId: () => 'fldGeneratedMockId',
  generateTableId: () => 'tblGeneratedMockId'
};

/**
 * An abstract base class with a common interface exposed to both Blocks SDK's
 * internal automated test suite and the blocks-testing public repo.
 *
 * @hidden
 */
var AbstractMockAirtableInterface = exports.AbstractMockAirtableInterface = /*#__PURE__*/function (_EventEmitter) {
  function AbstractMockAirtableInterface(initData) {
    var _this;
    (0, _classCallCheck2.default)(this, AbstractMockAirtableInterface);
    _this = _callSuper(this, AbstractMockAirtableInterface);
    (0, _defineProperty2.default)(_this, "sdkInitData", void 0);
    (0, _defineProperty2.default)(_this, "_initData", void 0);
    _this._initData = (0, _private_utils.cloneDeep)(initData);
    _this.reset();
    return _this;
  }

  /**
   * Revert the mock interface to its initial state. This includes:
   *
   * - removing all event listeners
   * - restoring the database schema
   */
  (0, _inherits2.default)(AbstractMockAirtableInterface, _EventEmitter);
  return (0, _createClass2.default)(AbstractMockAirtableInterface, [{
    key: "reset",
    value: function reset() {
      this.removeAllListeners();
      this.sdkInitData = (0, _private_utils.cloneDeep)(this._initData);
    }

    // The following properties are defined using accessors in order to
    // facilitate overriding in subclasses.
  }, {
    key: "aggregators",
    get: function get() {
      return aggregators;
    }
  }, {
    key: "fieldTypeProvider",
    get: function get() {
      return fieldTypeProvider;
    }
  }, {
    key: "urlConstructor",
    get: function get() {
      return urlConstructor;
    }
  }, {
    key: "globalConfigHelpers",
    get: function get() {
      return globalConfigHelpers;
    }
  }, {
    key: "idGenerator",
    get: function get() {
      return idGenerator;
    }
  }, {
    key: "assertAllowedSdkPackageVersion",
    value: function assertAllowedSdkPackageVersion() {}
  }, {
    key: "applyMutationAsync",
    value: function applyMutationAsync(mutation, opts) {
      return Promise.resolve();
    }
  }, {
    key: "checkPermissionsForMutation",
    value: function checkPermissionsForMutation(mutation) {
      return {
        hasPermission: true
      };
    }
  }, {
    key: "createVisList",
    value: function createVisList(appInterface, recordDatas, fieldDatas, sorts) {
      return {
        removeRecordIds(recordIds) {},
        addRecordData(recordData) {},
        getOrderedRecordIds() {
          return recordDatas.map(_ref => {
            var id = _ref.id;
            return id;
          });
        }
      };
    }
  }, {
    key: "subscribeToModelUpdates",
    value: function subscribeToModelUpdates(fn) {
      this.on('modelupdates', fn);
    }
  }, {
    key: "setActiveViewOrTable",
    value: function setActiveViewOrTable(tableId, viewId) {}

    // TODO(jugglinmike): Implement
  }, {
    key: "subscribeToGlobalConfigUpdates",
    value: function subscribeToGlobalConfigUpdates() {}
  }, {
    key: "subscribeToSettingsButtonClick",
    value: function subscribeToSettingsButtonClick() {}
  }, {
    key: "subscribeToEnterFullScreen",
    value: function subscribeToEnterFullScreen() {}
  }, {
    key: "subscribeToExitFullScreen",
    value: function subscribeToExitFullScreen() {}
  }, {
    key: "subscribeToFocus",
    value: function subscribeToFocus() {}
  }, {
    key: "triggerModelUpdates",
    value: function triggerModelUpdates(changes) {
      this.emit('modelupdates', {
        changes
      });
    }

    // TODO(jugglinmike): Implement
  }, {
    key: "triggerGlobalConfigUpdates",
    value: function triggerGlobalConfigUpdates() {}
  }, {
    key: "triggerSettingsButtonClick",
    value: function triggerSettingsButtonClick() {}
  }, {
    key: "triggerEnterFullScreen",
    value: function triggerEnterFullScreen() {}
  }, {
    key: "triggerExitFullScreen",
    value: function triggerExitFullScreen() {}
  }, {
    key: "triggerFocus",
    value: function triggerFocus() {}
  }, {
    key: "unsubscribeFromCursorData",
    value: function unsubscribeFromCursorData() {}
  }, {
    key: "unsubscribeFromTableData",
    value: function unsubscribeFromTableData() {}
  }, {
    key: "unsubscribeFromCellValuesInFields",
    value: function unsubscribeFromCellValuesInFields() {}
  }, {
    key: "unsubscribeFromViewData",
    value: function unsubscribeFromViewData() {}
  }]);
}(EventEmitter);