"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.string.ends-with.js");
require("core-js/modules/es.string.pad-start.js");
var _private_utils = require("./private_utils");
var _colors = _interopRequireWildcard(require("./colors"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @module @airtable/blocks/ui: colorUtils */ /** */

/** A red/green/blue color object. Each property is a number from 0 to 255. */

/**
 * Utilities for working with {@link Color} names from the {@link colors} enum.
 *
 * @docsPath UI/utils/colorUtils
 */

var colorUtils = {
  getHexForColor: colorString => {
    var color = (0, _private_utils.getEnumValueIfExists)(_colors.default, colorString);
    if (!color) {
      return null;
    }
    var rgbTuple = _colors.rgbTuplesByColor[color];
    var hexNumber = rgbTuple[0] << 16 | rgbTuple[1] << 8 | rgbTuple[2];
    return "#".concat(hexNumber.toString(16).padStart(6, '0'));
  },
  getRgbForColor: colorString => {
    var color = (0, _private_utils.getEnumValueIfExists)(_colors.default, colorString);
    if (!color) {
      return null;
    }
    var rgbTuple = _colors.rgbTuplesByColor[color];
    return {
      r: rgbTuple[0],
      g: rgbTuple[1],
      b: rgbTuple[2]
    };
  },
  shouldUseLightTextOnColor: colorString => {
    if (!(0, _private_utils.has)(_colors.rgbTuplesByColor, colorString)) {
      // Don't have a color for this. Let's just return false as a default
      // instead of throwing.
      return false;
    }

    // Light1 and Light2 colors use dark text.
    // Bright, Dark1 and no suffix colors use light text.
    // NOTE: use shouldUseDarkText instead of shouldUseLightText just to make
    // checking the suffix easier, since no suffix uses light text.
    var shouldUseDarkText = colorString.endsWith('Light1') || colorString.endsWith('Light2');
    return !shouldUseDarkText;
  }
};
var _default = exports.default = colorUtils;