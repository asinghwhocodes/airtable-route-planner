"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.for-each.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sharedSelectPropTypes = exports.sharedSelectBasePropTypes = exports.selectStylePropTypes = exports.default = void 0;
require("core-js/modules/es.array.concat.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.map.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _emotion = require("emotion");
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _core = require("@styled-system/core");
var _private_utils = require("../private_utils");
var _error_utils = require("../error_utils");
var _use_form_field = _interopRequireDefault(require("./use_form_field"));
var _system = require("./system");
var _use_theme = _interopRequireDefault(require("./theme/use_theme"));
var _tooltip_anchor_props = require("./types/tooltip_anchor_props");
var _select_and_select_buttons_helpers = require("./select_and_select_buttons_helpers");
var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));
var _control_sizes = require("./control_sizes");
var _excluded = ["size", "value", "options", "autoFocus", "disabled", "id", "name", "tabIndex", "onChange", "onMouseEnter", "onMouseLeave", "onClick", "hasOnClick", "className", "style", "aria-label", "aria-describedby", "aria-labelledby"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /** @module @airtable/blocks/ui: Select */ /** */
/** @hidden */

var SelectVariant = (0, _private_utils.createEnum)('default');

/** @internal */
function useSelectVariant() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SelectVariant.default;
  var _useTheme = (0, _use_theme.default)(),
    selectVariants = _useTheme.selectVariants;
  return selectVariants[variant];
}

// This component isn't great right now. It's just a styled <select> with a really hacky
// way of getting the chevron arrow to show up. It also behaves weirdly when you give it
// a margin (I think this is a limitation of <select>). We should probably replace it with
// something like react-select, which would give us nice features like rendering custom
// elements for options (e.g. for field type icons) and typeahead search.

/**
 * Style props shared between the following components.
 * * {@link Select}, {@link SelectSynced}
 * * {@link TablePicker}, {@link TablePickerSynced}
 * * {@link ViewPicker}, {@link ViewPickerSynced}
 * * {@link FieldPicker}, {@link FieldPickerSynced}
 *
 * Also accepts:
 * * {@link FlexItemSetProps}
 * * {@link MarginProps}
 * * {@link MaxWidthProps}
 * * {@link MinWidthProps}
 * * {@link PositionSetProps}
 * * {@link MaxWidthProps}
 *
 * @noInheritDoc
 */

/**
 * Props shared between the following components:
 * * {@link Select}, {@link SelectSynced}
 * * {@link TablePicker}, {@link TablePickerSynced}
 * * {@link ViewPicker}, {@link ViewPickerSynced}
 * * {@link FieldPicker}, {@link FieldPickerSynced}
 *
 * @noInheritDoc
 */

var selectStylePropTypes = exports.selectStylePropTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _system.maxWidthPropTypes), _system.minWidthPropTypes), _system.widthPropTypes), _system.flexItemSetPropTypes), _system.positionSetPropTypes), _system.marginPropTypes);

// Shared with `Select`, `SelectSynced`, `ModelPickerSelect` and `(Table/View/Field)Picker(Synced)`
var sharedSelectBasePropTypes = exports.sharedSelectBasePropTypes = _objectSpread(_objectSpread({
  size: _control_sizes.controlSizePropType,
  autoFocus: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  id: _propTypes.default.string,
  name: _propTypes.default.string,
  tabIndex: _propTypes.default.number,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  'aria-label': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,
  'aria-describedby': _propTypes.default.string
}, _tooltip_anchor_props.tooltipAnchorPropTypes), selectStylePropTypes);

/**
 * Props shared between the {@link Select} and {@link SelectSynced} components.
 */

// Shared with `Select` and `SelectSynced`.
var sharedSelectPropTypes = exports.sharedSelectPropTypes = _objectSpread({
  // We do more strict checks in render.
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    value: _select_and_select_buttons_helpers.selectOptionValuePropType,
    label: _propTypes.default.node.isRequired,
    disabled: _propTypes.default.bool
  }).isRequired).isRequired,
  onChange: _propTypes.default.func
}, sharedSelectBasePropTypes);

/**
 * Props for the {@link Select} component. Also accepts:
 * * {@link SelectStyleProps}
 *
 * @docsPath UI/components/Select
 */

var styleParser = (0, _core.compose)(_system.maxWidth, _system.minWidth, _system.width, _system.flexItemSet, _system.positionSet, _system.margin);

/**
 * Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface.
 *
 * [[ Story id="select--example" title="Select example" ]]
 *
 * @component
 * @docsPath UI/components/Select
 */
var Select = (props, ref) => {
  var _props$size = props.size,
    size = _props$size === void 0 ? _control_sizes.ControlSize.default : _props$size,
    value = props.value,
    _props$options = props.options,
    originalOptions = _props$options === void 0 ? [] : _props$options,
    autoFocus = props.autoFocus,
    disabled = props.disabled,
    id = props.id,
    name = props.name,
    tabIndex = props.tabIndex,
    onChange = props.onChange,
    onMouseEnter = props.onMouseEnter,
    onMouseLeave = props.onMouseLeave,
    onClick = props.onClick,
    hasOnClick = props.hasOnClick,
    className = props.className,
    style = props.style,
    ariaLabel = props['aria-label'],
    ariaDescribedByProp = props['aria-describedby'],
    ariaLabelledBy = props['aria-labelledby'],
    styleProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var formFieldContextValue = (0, _use_form_field.default)();
  var controlId = formFieldContextValue ? formFieldContextValue.controlId : undefined;
  var descriptionId = formFieldContextValue ? formFieldContextValue.descriptionId : undefined;
  var ariaDescribedBy = [ariaDescribedByProp, descriptionId].filter(Boolean).join(' ') || undefined;
  // There is only a single default variant.
  var classNameForSelectVariant = useSelectVariant();
  var classNameForSelectSize = (0, _control_sizes.useSelectSize)(size);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({
    width: '100%'
  }, styleProps), styleParser);
  function _onChange(e) {
    if (onChange) {
      var newValue = (0, _select_and_select_buttons_helpers.stringToOptionValue)(e.currentTarget.value);
      onChange(newValue);
    }
  }

  // Check options here for a cleaner stack trace.
  // Also, even though options are required, still check if it's set because
  // the error is really ugly and covers up the prop type check.
  var validationResult = (0, _select_and_select_buttons_helpers.validateOptions)(originalOptions);
  if (!validationResult.isValid) {
    throw (0, _error_utils.spawnError)('<Select> %s', validationResult.reason);
  }
  var didFindOptionMatchingValue = false;
  var _iterator = _createForOfIteratorHelper(originalOptions),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var option = _step.value;
      if (option.value === value) {
        didFindOptionMatchingValue = true;
        break;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var options = [];
  if (!didFindOptionMatchingValue) {
    // Since there's no option that matches the given value, let's add an
    // empty option at the top and log a warning.
    options.push({
      label: '',
      value,
      disabled: true
    });
    // eslint-disable-next-line no-console
    console.warn("No option for selected value in <Select>: ".concat(String(value)).substr(0, 100));
  }
  options.push(...originalOptions);
  return /*#__PURE__*/React.createElement("select", {
    ref: ref,
    value: (0, _select_and_select_buttons_helpers.optionValueToString)(value),
    onChange: _onChange,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    autoFocus: autoFocus,
    disabled: disabled,
    id: id || controlId,
    name: name,
    tabIndex: tabIndex,
    className: (0, _emotion.cx)(classNameForSelectVariant, classNameForSelectSize, classNameForStyleProps, className),
    style: style,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy
  }, options.map((option, index) => {
    var valueJson = (0, _select_and_select_buttons_helpers.optionValueToString)(option.value);
    return /*#__PURE__*/React.createElement("option", {
      key: "".concat(valueJson, "-").concat(option.label, "-").concat(index),
      value: valueJson,
      disabled: option.disabled ? option.disabled : false
    }, option.label);
  }));
};
var ForwardedRefSelect = /*#__PURE__*/React.forwardRef(Select);
ForwardedRefSelect.displayName = 'Select';
ForwardedRefSelect.propTypes = _objectSpread({
  value: _select_and_select_buttons_helpers.selectOptionValuePropType
}, sharedSelectPropTypes);
var _default = exports.default = ForwardedRefSelect;