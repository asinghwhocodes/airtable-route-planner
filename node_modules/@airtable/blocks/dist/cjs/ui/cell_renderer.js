"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.for-each.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.cellRendererStylePropTypes = exports.CellRenderer = void 0;
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.set.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _emotion = require("emotion");
var React = _interopRequireWildcard(require("react"));
var _core = require("@styled-system/core");
var _error_utils = require("../error_utils");
var _record = _interopRequireDefault(require("../models/record"));
var _field = _interopRequireDefault(require("../models/field"));
var _field2 = require("../types/field");
var _with_hooks = _interopRequireDefault(require("./with_hooks"));
var _use_watchable = _interopRequireDefault(require("./use_watchable"));
var _system = require("./system");
var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));
var _with_styled_system = require("./with_styled_system");
var _tooltip_anchor_props = require("./types/tooltip_anchor_props");
var _sdk_context = require("./sdk_context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /** @module @airtable/blocks/ui: CellRenderer */ /** */
/**
 * Style props for the {@link CellRenderer} component. Also accepts:
 * * {@link FlexItemSetProps}
 * * {@link MarginProps}
 * * {@link MaxWidthProps}
 * * {@link MinWidthProps}
 * * {@link PositionSetProps}
 * * {@link WidthProps}
 *
 * @noInheritDoc
 */

var styleParser = (0, _core.compose)(_system.display, _system.flexItemSet, _system.margin, _system.maxWidth, _system.minWidth, _system.positionSet, _system.width);
var cellRendererStylePropTypes = exports.cellRendererStylePropTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _system.displayPropTypes), _system.flexItemSetPropTypes), _system.marginPropTypes), _system.maxWidthPropTypes), _system.minWidthPropTypes), _system.positionSetPropTypes), _system.widthPropTypes);

/**
 * Props for the {@link CellRenderer} component. Also accepts:
 * * {@link CellRendererStyleProps}
 *
 * @docsPath UI/components/CellRenderer
 * @noInheritDoc
 */
/**
 * Displays the contents of a cell given a field and record.
 *
 * [[ Story id="cellrenderer--example" title="Cell renderer example" ]]
 *
 * @component
 * @docsPath UI/components/CellRenderer
 */
var CellRenderer = exports.CellRenderer = /*#__PURE__*/function (_React$Component) {
  /** @hidden */
  function CellRenderer(props) {
    var _this;
    (0, _classCallCheck2.default)(this, CellRenderer);
    _this = _callSuper(this, CellRenderer, [props]);
    _this._validateProps(props);
    return _this;
  }
  /** @hidden */
  (0, _inherits2.default)(CellRenderer, _React$Component);
  return (0, _createClass2.default)(CellRenderer, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this._validateProps(nextProps);
    }
    /** @internal */
  }, {
    key: "_validateProps",
    value: function _validateProps(props) {
      if (props.record && !props.record.isDeleted && !props.field.isDeleted && props.record.parentTable.id !== props.field.parentTable.id) {
        throw (0, _error_utils.spawnError)('CellRenderer: record %s and field %s do not have the same parent table', props.record.parentTable.id, props.field.parentTable.id);
      }
    }
    /** @hidden */
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        record = _this$props.record,
        cellValue = _this$props.cellValue,
        field = _this$props.field,
        shouldWrap = _this$props.shouldWrap,
        onMouseEnter = _this$props.onMouseEnter,
        onMouseLeave = _this$props.onMouseLeave,
        onClick = _this$props.onClick,
        className = _this$props.className,
        style = _this$props.style,
        cellClassName = _this$props.cellClassName,
        cellStyle = _this$props.cellStyle,
        renderInvalidCellValue = _this$props.renderInvalidCellValue,
        sdk = _this$props.sdk;
      if (field.isDeleted) {
        return null;
      }
      var airtableInterface = sdk.__airtableInterface;
      var appInterface = sdk.__appInterface;
      var cellValueToRender;
      if (record) {
        if (cellValue !== undefined) {
          // eslint-disable-next-line
          console.warn('CellRenderer was given both record and cellValue, choosing to render record value');
        }
        if (record.isDeleted) {
          return null;
        }
        cellValueToRender = record.getCellValue(field.id);
      } else {
        // NOTE: this will not work if you want to render a cell value for
        // foreign record, single/multi select, or single/multi collaborator
        // fields and the cell value is not *currently* valid for that field.
        // i.e. if you want to render a foreign record for a record that
        // does not yet exist, this will throw.
        // TODO: handle "preview" cell values that are not yet valid in the given field
        // but that *could* be.
        // To validate public cell values, we only have validateCellValueForUpdate
        // However, this is not implemented for computed fields (since you can't update them)
        // so we just skip the check.
        // TODO(emma): actually check this somehow.
        if (!field.isComputed) {
          var validationResult = airtableInterface.fieldTypeProvider.validateCellValueForUpdate(appInterface, cellValue, null, field._data);
          if (!validationResult.isValid) {
            if (renderInvalidCellValue) {
              return /*#__PURE__*/React.createElement("div", {
                onMouseEnter: onMouseEnter,
                onMouseLeave: onMouseLeave,
                onClick: onClick,
                className: className,
                style: style
              }, renderInvalidCellValue(cellValue, field));
            } else {
              throw (0, _error_utils.spawnError)('Cannot render invalid cell value %s: %s', cellValue, validationResult.reason);
            }
          }
        }
        cellValueToRender = cellValue;
      }

      // in record.getCellValue, we reformat the cell value to the new public format. in order to
      // make it work with the cell renderer, we need to format it back the other way.
      // Note: we can't use _getRawCellValue here since we also need to handle formatting
      // these in the case where the user passed cellValue instead of a record.
      if (cellValueToRender && field.type === _field2.FieldType.MULTIPLE_LOOKUP_VALUES && !airtableInterface.sdkInitData.isUsingNewLookupCellValueFormat) {
        var originalCellValue = cellValueToRender;
        var linkedRecordIdsSet = new Set();
        var valuesByLinkedRecordId = {};
        var _iterator = _createForOfIteratorHelper(originalCellValue),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _step.value,
              linkedRecordId = _step$value.linkedRecordId,
              value = _step$value.value;
            linkedRecordIdsSet.add(linkedRecordId);
            if (!valuesByLinkedRecordId[linkedRecordId]) {
              valuesByLinkedRecordId[linkedRecordId] = [];
            }
            valuesByLinkedRecordId[linkedRecordId].push(value);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        cellValueToRender = {
          linkedRecordIds: Array.from(linkedRecordIdsSet),
          valuesByLinkedRecordId
        };
      }
      var _airtableInterface$fi = airtableInterface.fieldTypeProvider.getCellRendererData(appInterface, cellValueToRender, field._data, !!shouldWrap),
        cellValueHtml = _airtableInterface$fi.cellValueHtml,
        attributes = _airtableInterface$fi.attributes;
      return /*#__PURE__*/React.createElement("div", {
        // TODO (stephen): remove tooltip anchor props
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onClick: onClick,
        className: (0, _emotion.cx)('baymax', className),
        style: style
      }, /*#__PURE__*/React.createElement("div", (0, _extends2.default)({}, attributes, {
        className: (0, _emotion.cx)('cell read', cellClassName),
        style: cellStyle,
        dangerouslySetInnerHTML: {
          __html: cellValueHtml
        }
      })));
    }
  }]);
}(React.Component);
/** @hidden */
(0, _defineProperty2.default)(CellRenderer, "propTypes", _objectSpread(_objectSpread({
  // NOTE: must pass in one of record or cellValue. It will default to using
  // the record if one is passed in, and cellValue otherwise.
  record: _propTypes.default.instanceOf(_record.default),
  cellValue: _propTypes.default.any,
  field: _propTypes.default.instanceOf(_field.default).isRequired,
  shouldWrap: _propTypes.default.bool,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  cellClassName: _propTypes.default.string,
  cellStyle: _propTypes.default.object,
  renderInvalidCellValue: _propTypes.default.func
}, _tooltip_anchor_props.tooltipAnchorPropTypes), cellRendererStylePropTypes));
/** @hidden */
(0, _defineProperty2.default)(CellRenderer, "defaultProps", {
  shouldWrap: true
});
var _default = exports.default = (0, _with_hooks.default)(CellRenderer, props => {
  var _splitStyleProps = (0, _with_styled_system.splitStyleProps)(props, styleParser.propNames, {
      display: 'block'
    }),
    styleProps = _splitStyleProps.styleProps,
    nonStyleProps = _splitStyleProps.nonStyleProps;
  var className = nonStyleProps.className;
  var classNameForStyleProps = (0, _use_styled_system.default)(styleProps, styleParser);
  var sdk = (0, _sdk_context.useSdk)();
  (0, _use_watchable.default)(props.record, ["cellValueInField:".concat(props.field.id)]);
  (0, _use_watchable.default)(props.field, ['type', 'options']);
  return {
    className: (0, _emotion.cx)(classNameForStyleProps, className),
    sdk
  };
});