"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSelectOptionValue = isSelectOptionValue;
exports.optionValueToString = optionValueToString;
exports.selectOptionValuePropType = void 0;
exports.stringToOptionValue = stringToOptionValue;
exports.validateOptions = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } /** @module @airtable/blocks/ui: Select */ /** */
// JSON stringify the value so you can use any primitive.
// Regular <select> coerces all values to string, which is confusing.
/**
 * Supported value types for {@link SelectOption}.
 */

/** @internal */
function isSelectOptionValue(value) {
  return value === null || value === undefined || typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';
}

/**
 * A select option for {@link Select}, {@link TablePicker}, {@link ViewPicker}, {@link FieldPicker}, and their `Synced` counterparts.
 */

// We cast the following prop type because we allow `null` as a valid option.
var selectOptionValuePropType = exports.selectOptionValuePropType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]);
var validateOptions = options => {
  if (options) {
    var _iterator = _createForOfIteratorHelper(options),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var option = _step.value;
        // These are hard errors because we can't guarantee that other values
        // will be JSON-encodable. And undefined gets coerced to the string
        // "undefined" which is confusing.
        if (typeof option.value === 'object' && option.value !== null) {
          return {
            isValid: false,
            reason: 'option value must be a string, number, boolean, null, or undefined. Got an object.'
          };
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return {
    isValid: true
  };
};

/** @internal */
exports.validateOptions = validateOptions;
function optionValueToString(value) {
  var valueJson = JSON.stringify(value === undefined ? {
    isUndefined: true
  } : {
    notUndefinedValue: value
  });
  return valueJson;
}
/** @internal */
function stringToOptionValue(valueJson) {
  var parsed = JSON.parse(valueJson);
  var value = parsed.isUndefined ? null : parsed.notUndefinedValue;
  return value;
}