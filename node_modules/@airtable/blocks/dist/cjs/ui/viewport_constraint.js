"use strict";

require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.weak-map.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var React = _interopRequireWildcard(require("react"));
var _sdk_context = require("./sdk_context");
var _with_hooks = _interopRequireDefault(require("./with_hooks"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @module @airtable/blocks/ui: ViewportConstraint
 * @docsPath UI/components/ViewportConstraint
 */ /** */
/** An object specifying a width and/or height for the block's viewport. */

/**
 * Props for the {@link ViewportConstraint} component.
 *
 * @docsPath UI/components/ViewportConstraint
 */

var didSizeChange = (prev, next) => (prev && prev.width) !== (next && next.width) || (prev && prev.height) !== (next && next.height);

/**
 * When mounted, this wrapper component applies size constraints to the {@link Viewport}.
 * Like {@link addMinSize}, this will fullscreen the extension if necessary and possible when
 * `minSize` is updated.
 *
 * @example
 * ```js
 * import {ViewportConstraint} from '@airtable/blocks/ui';
 * <ViewportConstraint minSize={{width: 400}} />
 * ```
 *
 * @example
 * ```js
 * import {ViewportConstraint} from '@airtable/blocks/ui';
 * <ViewportConstraint maxFullScreenSize={{width: 600, height: 400}}>
 *      <div>I need a max fullscreen size!</div>
 * </ViewportConstraint>
 * ```
 * @docsPath UI/components/ViewportConstraint
 * @component
 */
var ViewportConstraint = /*#__PURE__*/function (_React$Component) {
  function ViewportConstraint() {
    var _this;
    (0, _classCallCheck2.default)(this, ViewportConstraint);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ViewportConstraint, [...args]);
    /** @internal */
    (0, _defineProperty2.default)(_this, "_removeMinSizeConstraintFn", null);
    /** @internal */
    (0, _defineProperty2.default)(_this, "_removeMaxFullscreenSizeConstrainFn", null);
    return _this;
  }
  (0, _inherits2.default)(ViewportConstraint, _React$Component);
  return (0, _createClass2.default)(ViewportConstraint, [{
    key: "componentDidMount",
    value: /** @hidden */
    function componentDidMount() {
      this._setMinSizeConstraint();
      this._setMaxFullscreenSizeConstraint();
    }

    /** @hidden */
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.children !== nextProps.children || didSizeChange(this.props.minSize, nextProps.minSize) || didSizeChange(this.props.maxFullscreenSize, nextProps.maxFullscreenSize);
    }

    /** @hidden */
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (didSizeChange(prevProps.minSize, this.props.minSize)) {
        this._setMinSizeConstraint();
      }
      if (didSizeChange(prevProps.maxFullscreenSize, this.props.maxFullscreenSize)) {
        this._setMaxFullscreenSizeConstraint();
      }
    }

    /** @hidden */
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._removeMinSizeConstraint();
      this._removeMaxFullscreenSizeConstraint();
    }

    /** @internal */
  }, {
    key: "_removeMinSizeConstraint",
    value: function _removeMinSizeConstraint() {
      if (this._removeMinSizeConstraintFn) {
        this._removeMinSizeConstraintFn();
        this._removeMinSizeConstraintFn = null;
      }
    }

    /** @internal */
  }, {
    key: "_removeMaxFullscreenSizeConstraint",
    value: function _removeMaxFullscreenSizeConstraint() {
      if (this._removeMaxFullscreenSizeConstrainFn) {
        this._removeMaxFullscreenSizeConstrainFn();
        this._removeMaxFullscreenSizeConstrainFn = null;
      }
    }

    /** @internal */
  }, {
    key: "_setMinSizeConstraint",
    value: function _setMinSizeConstraint() {
      this._removeMinSizeConstraint();
      var minSize = this.props.minSize;
      if (minSize) {
        this._removeMinSizeConstraintFn = this.props.sdk.viewport.addMinSize(minSize);
      }
    }

    /** @internal */
  }, {
    key: "_setMaxFullscreenSizeConstraint",
    value: function _setMaxFullscreenSizeConstraint() {
      this._removeMaxFullscreenSizeConstraint();
      var maxFullscreenSize = this.props.maxFullscreenSize;
      if (maxFullscreenSize) {
        this._removeMaxFullscreenSizeConstrainFn = this.props.sdk.viewport.addMaxFullscreenSize(maxFullscreenSize);
      }
    }

    /** @hidden */
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children);
    }
  }]);
}(React.Component);
/** @hidden */
(0, _defineProperty2.default)(ViewportConstraint, "propTypes", {
  minSize: _propTypes.default.shape({
    width: _propTypes.default.number,
    height: _propTypes.default.number
  }),
  maxFullscreenSize: _propTypes.default.shape({
    width: _propTypes.default.number,
    height: _propTypes.default.number
  }),
  children: _propTypes.default.node
});
var _default = exports.default = (0, _with_hooks.default)(ViewportConstraint, props => {
  return {
    sdk: (0, _sdk_context.useSdk)()
  };
});