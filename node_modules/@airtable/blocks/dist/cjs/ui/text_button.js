"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.for-each.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.textButtonStylePropTypes = exports.default = void 0;
require("core-js/modules/es.array.includes.js");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _emotion = require("emotion");
var _core = require("@styled-system/core");
var _private_utils = require("../private_utils");
var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));
var _use_theme = _interopRequireDefault(require("./theme/use_theme"));
var _aria_props = require("./types/aria_props");
var _create_responsive_prop_type = _interopRequireDefault(require("./system/utils/create_responsive_prop_type"));
var _system = require("./system");
var _text = require("./text");
var _icon_config = require("./icon_config");
var _icon = _interopRequireDefault(require("./icon"));
var _tooltip_anchor_props = require("./types/tooltip_anchor_props");
var _css_helpers = _interopRequireDefault(require("./css_helpers"));
var _box = _interopRequireDefault(require("./box"));
var _excluded = ["size", "variant", "icon", "children", "disabled", "id", "tabIndex", "dataAttributes", "onClick", "className", "style", "onMouseEnter", "onMouseLeave", "hasOnClick", "aria-selected", "aria-label", "aria-labelledby", "aria-describedby", "aria-controls", "aria-expanded", "aria-haspopup", "aria-hidden", "aria-live"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /** @module @airtable/blocks/ui: TextButton */ /** */
/**
 * Style props for the {@link TextButton} component. Also accepts:
 * * {@link FlexItemSetProps}
 * * {@link MaxWidthProps}
 * * {@link MinWidthProps}
 * * {@link PositionSetProps}
 * * {@link SpacingSetProps}
 * * {@link WidthProps}
 *
 * @noInheritDoc
 */

var styleParser = (0, _core.compose)(_system.display, _system.maxWidth, _system.minWidth, _system.width, _system.flexItemSet, _system.positionSet, _system.spacingSet);
var textButtonStylePropTypes = exports.textButtonStylePropTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
  display: (0, _create_responsive_prop_type.default)(_propTypes.default.oneOf(['inline-flex', 'flex', 'none']))
}, _system.maxWidthPropTypes), _system.minWidthPropTypes), _system.widthPropTypes), _system.flexItemSetPropTypes), _system.positionSetPropTypes), _system.spacingSetPropTypes);

/**
 * Variants for the {@link TextButton} component:
 *
 * • **default**
 *
 * Blue text.
 *
 * • **dark**
 *
 * Dark gray text.
 *
 * • **light**
 *
 * Light gray text.
 */

var TextButtonVariant = (0, _private_utils.createEnum)('default', 'dark', 'light');
var textButtonVariantPropType = (0, _private_utils.createPropTypeFromEnum)(TextButtonVariant);

/** @internal */
function useTextButtonVariant() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TextButtonVariant.default;
  var _useTheme = (0, _use_theme.default)(),
    textButtonVariants = _useTheme.textButtonVariants;
  return textButtonVariants[variant];
}

/**
 * Props for the {@link TextButton} component. Also supports:
 * * {@link AriaProps}
 * * {@link TextButtonStyleProps}
 *
 * @noInheritDoc
 * @docsPath UI/components/TextButton
 */

/**
 * A text button component with sizes and variants.
 *
 * [[ Story id="textbutton--example" title="Text button example" ]]
 *
 * @docsPath UI/components/TextButton
 * @component
 */
var TextButton = (props, ref) => {
  var _props$size = props.size,
    size = _props$size === void 0 ? _text.TextSize.default : _props$size,
    _props$variant = props.variant,
    variant = _props$variant === void 0 ? TextButtonVariant.default : _props$variant,
    icon = props.icon,
    children = props.children,
    disabled = props.disabled,
    id = props.id,
    _props$tabIndex = props.tabIndex,
    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
    dataAttributes = props.dataAttributes,
    onClick = props.onClick,
    className = props.className,
    style = props.style,
    onMouseEnter = props.onMouseEnter,
    onMouseLeave = props.onMouseLeave,
    hasOnClick = props.hasOnClick,
    ariaSelected = props['aria-selected'],
    ariaLabel = props['aria-label'],
    ariaLabelledBy = props['aria-labelledby'],
    ariaDescribedBy = props['aria-describedby'],
    ariaControls = props['aria-controls'],
    ariaExpanded = props['aria-expanded'],
    ariaHasPopup = props['aria-haspopup'],
    ariaHidden = props['aria-hidden'],
    ariaLive = props['aria-live'],
    styleProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var classNameForTextStyle = (0, _text.useTextStyle)(size);
  var classNameForTextButtonVariant = useTextButtonVariant(variant);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({
    display: 'inline-flex',
    // Use a negative margin to undo the padding.
    padding: '0 0.1em',
    margin: '0 -0.1em',
    maxWidth: '100%'
  }, styleProps), styleParser);
  var hasIcon = icon !== undefined;
  var hasChildren = !!children;
  if (!hasChildren && !ariaLabel) {
    // eslint-disable-next-line no-console
    console.error('<TextButton> without a text label should include an explicit aria-label prop.');
  }

  /** @internal */
  function _onKeyDown(e) {
    if (e.ctrlKey || e.metaKey || e.shiftKey) {
      return;
    }

    //  Use `Spacebar` to support FF <= 37, IE 9-11.
    if ([' ', 'Spacebar', 'Enter'].includes(e.key)) {
      // Prevent scrolling when pressing `Spacebar`.
      e.preventDefault();
      if (onClick) {
        onClick(e);
      }
    }
  }
  return /*#__PURE__*/React.createElement("span", (0, _extends2.default)({
    ref: ref,
    id: id
    // Don't set `tabIndex` if `disabled`. We do set it though even if
    // `onClick` is not provided so that it mimics the behavior of a native
    // `button`. We also prevent the user from passing in their own
    // `tabIndex` in the case that it is disabled. This is better than a
    // `-1` because `-1` will make the element focusable but not reachable
    // via keyboard navigation.
    ,
    tabIndex: !disabled ? tabIndex : undefined
    // Only fire these events if the `disabled` prop is not true.
    ,
    onClick: !disabled ? onClick : undefined,
    onKeyDown: !disabled ? _onKeyDown : undefined,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    className: (0, _emotion.cx)(classNameForTextStyle,
    // TextButton goes 2nd because it overrides `fontWeight`.
    classNameForTextButtonVariant, classNameForStyleProps, className),
    style: style
    // Always have `role="button"`, even if it is disabled. Combined with
    // `aria-disabled`, screen readers will announce this the same as
    // a native `button` element.
    ,
    role: "button"
    // Announce to screen readers that the `TextButton` is disabled.
    ,
    "aria-disabled": disabled ? 'true' : undefined,
    "aria-selected": ariaSelected,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-haspopup": ariaHasPopup,
    "aria-hidden": ariaHidden,
    "aria-live": ariaLive
  }, dataAttributes), typeof icon === 'string' ? /*#__PURE__*/React.createElement(_icon.default, {
    name: icon,
    flex: "none",
    size: "1em"
  }) : icon, hasChildren && /*#__PURE__*/React.createElement(_box.default, {
    as: "span"
    // The margin is on the span, and not on the icon because it would mean that when using a custom icon
    // the consumer would manually need to figure out what the margin is supposed to be.
    ,
    marginLeft: hasIcon ? '0.5em' : undefined,
    className: _css_helpers.default.TRUNCATE
  }, children));
};
var ForwardedRefTextButton = /*#__PURE__*/React.forwardRef(TextButton);
ForwardedRefTextButton.propTypes = _objectSpread(_objectSpread(_objectSpread({
  size: _text.textSizePropType,
  variant: textButtonVariantPropType,
  icon: _propTypes.default.oneOfType([_icon_config.iconNamePropType, _propTypes.default.element]),
  disabled: _propTypes.default.bool,
  children: _propTypes.default.node,
  id: _propTypes.default.string,
  tabIndex: _propTypes.default.number,
  dataAttributes: _propTypes.default.any,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  'aria-selected': _propTypes.default.bool
}, textButtonStylePropTypes), _aria_props.ariaPropTypes), _tooltip_anchor_props.tooltipAnchorPropTypes);
ForwardedRefTextButton.displayName = 'TextButton';
var _default = exports.default = ForwardedRefTextButton;