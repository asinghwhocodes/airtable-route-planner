"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/web.dom-collections.for-each.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allStylesPropTypes = exports.allStylesParser = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _core = require("@styled-system/core");
var _index = require("./index");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /** @module @airtable/blocks/ui/system: All style props */ /** */
/**
 * In the Blocks SDK, UI components can be styled via a set of supported style props.
 * These style props (e.g. `width`, `margin`, `backgroundColor`) take a subset of
 * supported CSS properties and expose them as explicit React component props.
 *
 * Here is an example that uses the {@link Box} layout primitive:
 *
 * ```
 * <Box
 *     display="flex"
 *     alignItems="center"
 *     justifyContent="center"
 *     width="200px"
 *     height="200px"
 * >
 *     Hello world
 * </Box>
 * ```
 *
 * This is equivalent to the following:
 *
 * ```
 * <div style={{
 *     display: 'flex',
 *     alignItems: 'center',
 *     justifyContent: 'center',
 *     width: '200px',
 *     height: '200px',
 * }}>
 *     Hello world
 * </div>
 * ```
 *
 * Style props also provide access to Airtable's design tokens, including our color
 * palette, typographic scale, and spacing scale. This allows developers to quickly
 * build UIs that adhere to the Airtable design system. As an example, numbers passed
 * to the `margin` or `padding` props are converted to our spacing scale, based on
 * powers of two.
 *
 * ```
 * <Box margin={0} /> // margin: 0;
 * <Box margin={1} /> // margin: 4px;
 * <Box margin={2} /> // margin: 8px;
 * <Box margin={3} /> // margin: 16px;
 *
 * // Negative margins are also supported
 * <Box margin={-1} /> // margin: -4px;
 * <Box margin={-2} /> // margin: -8px;
 * <Box margin={-3} /> // margin: -16px;
 * ```
 *
 * To override this behavior and use a specific pixel value (or other units, like percentages
 * or ems/rems), you may pass a string like `200px`. However, this is generally discouraged,
 * as these values don't adhere to the same grid/vertical rhythm as the rest of our components.
 *
 * As another example, style props like `backgroundColor` and `textColor` accept
 * {@link Colors|color names} that ensure visual consistency with the Airtable styleguide.
 * Like the spacing scale, you can always opt out by passing in hex/rgb/hsl strings directly.
 *
 * ```
 * <Box backgroundColor="blue" textColor="white" />
 * ```
 *
 * Each component in our UI library exposes a particular subset of style props, documented as
 * style prop interfaces. For more information, refer to the API reference for the specific
 * component that you're trying to use.
 *
 * All supported style props:
 * * {@link AppearanceSetProps|Appearance}
 * * {@link DimensionsSetProps|Dimensions}
 * * {@link FlexContainerSetProps|Flex container}
 * * {@link FlexItemSetProps|Flex item}
 * * {@link PositionSetProps|Position}
 * * {@link SpacingSetProps|Spacing}
 * * {@link TypographySetProps|Typography}
 * * {@link DisplayProps|Display}
 * * {@link OverflowProps|Overflow}
 *
 * @docsPath UI/Style System/All styles
 */

var allStylesParser = exports.allStylesParser = (0, _core.compose)(_index.appearanceSet, _index.dimensionsSet, _index.flexContainerSet, _index.flexItemSet, _index.positionSet, _index.spacingSet, _index.typographySet, _index.display, _index.overflow);
var allStylesPropTypes = exports.allStylesPropTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _index.appearanceSetPropTypes), _index.dimensionsSetPropTypes), _index.flexContainerSetPropTypes), _index.flexItemSetPropTypes), _index.positionSetPropTypes), _index.spacingSetPropTypes), _index.typographySetPropTypes), _index.displayPropTypes), _index.overflowPropTypes);