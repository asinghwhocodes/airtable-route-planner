"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getStylePropsForResponsiveProp;
var _error_utils = require("../../../error_utils");
var _private_utils = require("../../../private_utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/**
 * Given a styled system scale, convert a responsive prop object into a style props object.
 * Typically used for variant APIs that compose multiple style props.
 *
 * @internal
 */
function getStylePropsForResponsiveProp(responsivePropObject, scale) {
  var responsiveStyleProps = {};
  var _iterator = _createForOfIteratorHelper((0, _private_utils.keys)(responsivePropObject)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var viewportKey = _step.value;
      var scaleValueForViewport = responsivePropObject[viewportKey];
      (0, _error_utils.invariant)(scaleValueForViewport, 'scaleValueForViewport');
      var propsForViewport = scale[scaleValueForViewport];
      (0, _error_utils.invariant)(propsForViewport !== undefined && propsForViewport !== null, 'propsForViewport');
      var _iterator3 = _createForOfIteratorHelper((0, _private_utils.keys)(propsForViewport)),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var propForViewportKey = _step3.value;
          if (!(0, _private_utils.has)(responsiveStyleProps, propForViewportKey)) {
            responsiveStyleProps[propForViewportKey] = {};
          }
          responsiveStyleProps[propForViewportKey][viewportKey] = propsForViewport[propForViewportKey];
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }

    /**
     * @internal
     * If multiple values are the same for each viewport, just use a string value.
     *
     * For example turn the following object:
     *
     * ```
     *  "fontSize": {
     *      "smallViewport": "13px",
     *      "mediumViewport": "15px"
     *  },
     *  "fontFamily": {
     *      "smallViewport": "default",
     *      "mediumViewport": "default"
     *  },
     * ```
     *
     * Into:
     *
     * ```
     *  "fontSize": {
     *      "smallViewport": "13px",
     *      "mediumViewport": "15px"
     *  },
     *  "fontFamily": "default"
     * ```
     */
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  for (var _i = 0, _Object$keys = Object.keys(responsiveStyleProps); _i < _Object$keys.length; _i++) {
    var stylePropKey = _Object$keys[_i];
    var shouldConsolidateValue = true;
    var prevValue = void 0;
    var _iterator2 = _createForOfIteratorHelper((0, _private_utils.values)(responsiveStyleProps[stylePropKey])),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var value = _step2.value;
        if (prevValue === undefined) {
          prevValue = value;
        } else if (prevValue !== value) {
          shouldConsolidateValue = false;
          break;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    if (shouldConsolidateValue) {
      responsiveStyleProps[stylePropKey] = prevValue;
    }
  }
  return responsiveStyleProps;
}