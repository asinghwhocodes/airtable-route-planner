"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.for-each.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var React = _interopRequireWildcard(require("react"));
var _error_utils = require("../error_utils");
var _input = _interopRequireWildcard(require("./input"));
var _use_synced = _interopRequireDefault(require("./use_synced"));
var _global_config_synced_component_helpers = _interopRequireDefault(require("./global_config_synced_component_helpers"));
var _excluded = ["globalConfigKey", "type", "disabled", "onChange"];
/** @module @airtable/blocks/ui: Input */
/** */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Props for the {@link InputSynced} component. Also accepts:
 * * {@link InputStyleProps}
 *
 * @docsPath UI/components/InputSynced
 * @groupPath UI/components/Input
 */

/**
 * A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}.
 *
 * [[ Story id="input--example-synced" title="Synced input example" ]]
 *
 * @docsPath UI/components/InputSynced
 * @groupPath UI/components/Input
 * @component
 */
var InputSynced = (props, ref) => {
  var globalConfigKey = props.globalConfigKey,
    _props$type = props.type,
    type = _props$type === void 0 ? _input.SupportedInputType.text : _props$type,
    disabled = props.disabled,
    _onChange = props.onChange,
    restOfProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useSynced = (0, _use_synced.default)(globalConfigKey),
    _useSynced2 = (0, _slicedToArray2.default)(_useSynced, 3),
    value = _useSynced2[0],
    setValue = _useSynced2[1],
    canSetValue = _useSynced2[2];
  var inputValue;
  if (value === null || value === undefined) {
    // If an input gets null or undefined for value, React treats it as uncontrolled
    // and will throw warnings when it becomes controlled.
    inputValue = '';
  } else if (typeof value === 'string') {
    inputValue = value;
  } else {
    throw (0, _error_utils.spawnError)('InputSynced only works with a global config value that is a string, null or undefined.');
  }
  return /*#__PURE__*/React.createElement(_input.default, (0, _extends2.default)({}, restOfProps, {
    ref: ref,
    disabled: disabled || !canSetValue,
    onChange: e => {
      setValue(e.target.value);
      if (_onChange) {
        _onChange(e);
      }
    },
    value: inputValue,
    type: type
  }));
};
var ForwardedRefInputSynced = /*#__PURE__*/React.forwardRef(InputSynced);
ForwardedRefInputSynced.propTypes = _objectSpread({
  globalConfigKey: _global_config_synced_component_helpers.default.globalConfigKeyPropType
}, _input.sharedInputPropTypes);
ForwardedRefInputSynced.displayName = 'InputSynced';
var _default = exports.default = ForwardedRefInputSynced;