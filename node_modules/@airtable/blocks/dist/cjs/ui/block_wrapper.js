"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _error_utils = require("../error_utils");
var _ui = require("./ui");
var _baymax_utils = require("./baymax_utils");
var _modal = _interopRequireDefault(require("./modal"));
var _loader = _interopRequireDefault(require("./loader"));
var _with_hooks = _interopRequireDefault(require("./with_hooks"));
var _use_watchable = _interopRequireDefault(require("./use_watchable"));
var _sdk_context = require("./sdk_context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /** @hidden */ /** */
var BlockWrapper = /*#__PURE__*/function (_React$Component) {
  /** @hidden */
  function BlockWrapper(props) {
    var _this;
    (0, _classCallCheck2.default)(this, BlockWrapper);
    _this = _callSuper(this, BlockWrapper, [props]);

    // We watch globalAlert in constructor, instead of using createDataContainer,
    // because createDataContainer starts watching after the component is mounted.
    // If we used createDataContainer and some child component in its constructor or
    // componentDidMount called globalAlert.showReloadPrompt, this component
    // would not update.
    // TODO(kasra): maybe change createDataContainer to handle this case
    // without having to special case it.
    /** @internal */
    (0, _defineProperty2.default)(_this, "_minSizeBeforeRender", null);
    _ui.globalAlert.watch('__alertInfo', () => _this.forceUpdate());
    return _this;
  }
  /** @hidden */
  (0, _inherits2.default)(BlockWrapper, _React$Component);
  return (0, _createClass2.default)(BlockWrapper, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this._snapshotMinSizeBeforeRender();
    }
    /** @hidden */
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._checkMinSizeConstraintUnchangedAfterRender();
    }
    /** @hidden */
  }, {
    key: "UNSAFE_componentWillUpdate",
    value: function UNSAFE_componentWillUpdate() {
      this._snapshotMinSizeBeforeRender();
    }
    /** @hidden */
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._checkMinSizeConstraintUnchangedAfterRender();
    }
    // usually createDataContainer handles re-rendering when watchable values
    // change. As minSize can be changed by child components though, it can
    // change before createDataContainer has a chance to set up watches. To get
    // around this, we take a snapshot of the minSize before render and call
    // .forceUpdate() if its changed after render
    /** @internal */
  }, {
    key: "_snapshotMinSizeBeforeRender",
    value: function _snapshotMinSizeBeforeRender() {
      this._minSizeBeforeRender = this.props.sdk.viewport.minSize;
    }
    /** @internal */
  }, {
    key: "_checkMinSizeConstraintUnchangedAfterRender",
    value: function _checkMinSizeConstraintUnchangedAfterRender() {
      var prevMinSize = this._minSizeBeforeRender;
      (0, _error_utils.invariant)(prevMinSize, 'prevMinSize must be set');
      var currentMinSize = this.props.sdk.viewport.minSize;
      if (currentMinSize.width !== prevMinSize.width || currentMinSize.height !== prevMinSize.height) {
        this.forceUpdate();
      }
    }
    /** @hidden */
  }, {
    key: "render",
    value: function render() {
      var viewport = this.props.sdk.viewport;
      var globalAlertInfo = _ui.globalAlert.__alertInfo;
      if (globalAlertInfo) {
        return /*#__PURE__*/React.createElement(_sdk_context.SdkContext.Provider, {
          value: this.props.sdk
        }, /*#__PURE__*/React.createElement(_modal.default, {
          className: (0, _baymax_utils.baymax)('absolute all-0 flex items-center justify-center p2'),
          style: {
            animation: 'none',
            maxWidth: undefined,
            maxHeight: undefined,
            borderRadius: 0,
            boxShadow: 'none'
          }
        }, globalAlertInfo.content));
      }
      return /*#__PURE__*/React.createElement(_sdk_context.SdkContext.Provider, {
        value: this.props.sdk
      }, /*#__PURE__*/React.createElement(React.Suspense, {
        fallback: /*#__PURE__*/React.createElement("div", {
          className: (0, _baymax_utils.baymax)('absolute all-0 flex items-center justify-center')
        }, /*#__PURE__*/React.createElement(_loader.default, null))
      }, /*#__PURE__*/React.createElement("div", {
        className: viewport.isSmallerThanMinSize ? (0, _baymax_utils.baymax)('absolute all-0 overflow-hidden') : ''
      }, this.props.children)), viewport.isSmallerThanMinSize && /*#__PURE__*/React.createElement("div", {
        className: (0, _baymax_utils.baymax)('absolute all-0 flex items-center justify-center p2 white'),
        style: {
          zIndex: 2147483647 // largest 32-bit signed integer (maximum z-index)
        }
      }, /*#__PURE__*/React.createElement("span", {
        className: (0, _baymax_utils.baymax)('center line-height-4 quiet strong')
      }, /*#__PURE__*/React.createElement("span", null, "Please make this extension bigger or "), /*#__PURE__*/React.createElement("span", {
        className: (0, _baymax_utils.baymax)('pointer understroke link-unquiet'),
        onClick: () => viewport.enterFullscreenIfPossible()
      }, "fullscreen"))));
    }
  }]);
}(React.Component);
var _default = exports.default = (0, _with_hooks.default)(BlockWrapper, _ref => {
  var sdk = _ref.sdk;
  (0, _use_watchable.default)(sdk.viewport, ['size', 'minSize']);
  return {};
});