"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.for-each.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withStyledSystem;
exports.splitStyleProps = splitStyleProps;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.set.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _emotion = require("emotion");
var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));
var _private_utils = require("../private_utils");
var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @internal
 * A higher-order component for working with the `useStyledSystem` hook in class-based components.
 * It takes a React component and converts style props into a single className prop.
 *
 * Generate boilerplate for using this hook with our scaffolding tool: https://o80pm.csb.app/
 *
 * Returns The transformed React component.
 *
 * @param Component The React component you want to use with styled system.
 * @param styleParser The style parser, constructed with `compose`.
 * @example
 * ```js
 * import * as React from 'react';
 * import {compose} from '@styled-system/core';
 * import withStyledSystem from './with_styled_system';
 * import {
 *     flexContainerSet,
 *     flexContainerSetPropTypes,
 *     FlexContainerSetProps,
 *     flexItemSet,
 *     FlexItemSetProps,
 *     flexItemSetPropTypes,
 *     margin,
 *     marginPropTypes,
 *     MarginProps,
 * } from './system';
 *
 * interface Props {
 *     className?: string;
 *     onClick: () => void;
 *     children: React.ReactNode;
 * };
 *
 * interface MyComponentStyleProps extends FlexContainerSetProps, FlexItemSetProps, MarginProps {}
 *
 * const styleParser = compose(
 *     flexContainerSet,
 *     flexItemSet,
 *     margin,
 * );
 *
 * const myComponentStylePropTypes = {
 *     ...flexContainerSetPropTypes,
 *     ...flexItemSetPropTypes,
 *     ...marginPropTypes,
 * };
 *
 * class MyComponent extends React.Component<Props, void> {
 *     static staticProp = 'STATIC';
 *     render() {
 *         const {className, onClick, children} = this.props;
 *         return (
 *             <div className={className} onClick={onClick}>
 *                 {children}
 *             </div>
 *         );
 *     }
 * }
 *
 * export default withStyledSystem<Props, MyComponentStyleProps, MyComponent, { staticProp: string }>(
 *     MyComponent,
 *     styleParser,
 *     myComponentStylePropTypes,
 *     {
 *         // Optional default style props.
 *         margin: 3
 *     }
 * );
 * ```
 */
function withStyledSystem(Component, styleParser, stylePropTypes, defaultStyleProps) {
  var WithStyledSystem = /*#__PURE__*/React.forwardRef((props, ref) => {
    var _splitStyleProps = splitStyleProps(props, styleParser.propNames, defaultStyleProps),
      styleProps = _splitStyleProps.styleProps,
      nonStyleProps = _splitStyleProps.nonStyleProps;
    var classNameForStyleProps = (0, _use_styled_system.default)((0, _private_utils.cast)(styleProps), styleParser);
    return /*#__PURE__*/React.createElement(Component, (0, _extends2.default)({
      ref: ref
    }, nonStyleProps, {
      className: (0, _emotion.cx)(classNameForStyleProps, nonStyleProps.className)
    }));
  });
  WithStyledSystem.propTypes = _objectSpread(_objectSpread({}, Component.propTypes), stylePropTypes);
  var componentName = Component.displayName || Component.name || 'Component';
  WithStyledSystem.displayName = "WithStyledSystem(".concat(componentName, ")");
  (0, _hoistNonReactStatics.default)(WithStyledSystem, Component);
  return WithStyledSystem;
}

/**
 * @internal
 * A helper method to split props into style props (for use with styled system) and
 * non-style props (to be passed into the wrapped component).
 *
 * Returns A result object with two keys: `styleProps` and `nonStyleProps`, which contain the
 * respective split props.
 *
 * @param props Props to be split into style and non-style props.
 * @param stylePropNames The list of allowed style prop names.
 * @param defaultStyleProps Default values for style props.
 */
function splitStyleProps(props) {
  var stylePropNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var defaultStyleProps = arguments.length > 2 ? arguments[2] : undefined;
  var stylePropNamesSet = new Set(stylePropNames);
  var styleProps = _objectSpread({}, defaultStyleProps);
  var nonStyleProps = {};
  var _iterator = _createForOfIteratorHelper((0, _private_utils.keys)(props)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var propName = _step.value;
      if (stylePropNamesSet.has(propName)) {
        styleProps[propName] = props[propName];
      } else {
        nonStyleProps[propName] = props[propName];
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return {
    styleProps,
    nonStyleProps
  };
}